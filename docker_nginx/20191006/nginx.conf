
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    #include /etc/nginx/conf.d/*.conf;


    #upstream disconf {  
    #    server tomcathost:8080;  
    #}  
  
    server {  
        listen   80;  
        server_name localhost;  

        # 日志配置
        access_log logs/disconf_access.log;  
        error_log logs/disconf_error.log;  
  
        # 静态资源配置
        location / {  
            root /usr/local/work/html;  
            index  index.html index.htm;
        }  

        # 静态资源配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
  
        # ~表示这里是正则表达式，^表示以什么开头，整句话的意思是如果是/api或者/export请求过来的话，就进入此处拦截。
        # 进入拦截后，会去请求http://disconf,这样就会去请求到本配置文件中的upstream disconf的配置，进而将请求转发至请求对应的tomcat。
        #location ~ ^/(api|export) {  
        #    proxy_pass http://disconf;    
        #    proxy_pass_header Server;
        #    proxy_redirect off;
        #    proxy_set_header Host $http_host;   
        #    proxy_set_header X-Real-IP $remote_addr;  
        #    proxy_set_header X-Scheme $scheme;  
        #}  
    }  



    #   以下注释为常见反向代理和静态服务器配置方式。
    #   对用户来说，浏览器访问看上去是二级目录的方式。

    #   upstream crm {
    #       server  172.31.69.27:8081;
    #   }
    #   
    #   upstream org-crm-app {
    #       server  172.31.69.27:8080;
    #   }
    #   
    #   server {
    #       listen       80;
    #       server_name  localhost;
    
    #       access_log /etc/nginx/logs/nginx-proxy.access.log;  
    #       error_log  /etc/nginx/logs/nginx-proxy.error.log;  
    
    #       location /crm {
    #           proxy_pass http://crm/;
    #            proxy_set_header Host             $host;
    #            proxy_set_header X-Real-IP        $remote_addr;
    #            proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
    #        }
    #        
    #        location /org-crm-app {
    #            proxy_pass http://org-crm-app/;
    #            proxy_set_header Host             $host;
    #            proxy_set_header X-Real-IP        $remote_addr;
    #            proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
    #        }
    #        
    #        location / {
    #            root   /usr/local/work/html;  
    #            index  index.html index.htm;
    #        }
    
    #        error_page   500 502 503 504  /50x.html;
    #        location = /50x.html {
    #            root   /usr/share/nginx/html;
    #        }
    #   }



    #   以下为基于域名的虚拟主机配置反向代理，也就是二级域名配置，多个二级域名对应同一个ip地址，即nginx所在服务器的ip地址。然后通过此处nginx虚拟主机的配置，可以再反向代理到对应的tomcat服务器上。
    #   使用这种方式如果是生产环境，需要为各个二级域名做域名映射，如果是本地环境，需要在hosts文件中做域名映射。
    #   对用户来说，浏览器访问的看上去是一个个独立的二级域名。

    #   upstream searchserver {
    #       server 192.168.225.133:8081;
    #   }
    #   upstream pictureserver {
    #       server 192.168.225.133:8082;
    #   }
    #   server {
    #       listen       80;
    #       server_name  search.itdragon.com;
    #       location / {
    #          proxy_pass  http://searchserver;
    #          index  index.html index.htm;
    #       }
    #   }
    #   server {
    #       listen       80;
    #       server_name  picture.itdragon.com;
    #       location / {
    #          proxy_pass   http://pictureserver;
    #          index  index.html index.htm;
    #       }
    #   }


    #   以下为基于域名的虚拟主机配置静态服务器，也就是二级域名配置，多个二级域名对应同一个ip地址，即nginx所在服务器的ip地址。然后通过此处nginx虚拟主机的配置，可找到二级域名所对应的自己的静态资源目录。
    #   使用这种方式如果是生产环境，需要为各个二级域名做域名映射，如果是本地环境，需要在hosts文件中做域名映射。
    #   对用户来说，浏览器访问的看上去是一个个独立的二级域名。

    #   server {
    #   listen       80;
    #   server_name  search.itdragon.com;
    #   location / {
    #      root   /usr/local/work/html-search;
    #      index  index.html index.htm;
    #   }
    #   }
    #   server {
    #       listen       80;
    #       server_name  picture.itdragon.com;
    #       location / {
    #          root   /usr/local/work/html-picture;
    #          index  index.html index.htm;
    #       }
    #   }

    # 对https的支持，这里先不展开，当浏览器访问https的请求时，默认使用的就是443端口，就好像http请求默认使用的80端口一样。此时需要nginx配置监听443端口，这个可以和80端口配置到一块去。
    # 同时指定https所需要的认证文件路径。这个可以用到的时候再配置。

}
